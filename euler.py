from sys import argv
from math import lcm

def e_001(maximum=1000, nums=[3, 5]):
	"""
	If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
	Find the sum of all the multiples of 3 or 5 below 1000.
	"""
	result = 0
	for i in range(1, maximum):
		if 0 in [i % n for n in nums]:
			result += i
	return result
	# 233168

def e_002(maximum=4000000, callback=lambda x: x % 2 == 0):
	"""
	Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
	"""
	terms = [1]
	next_term = 2
	while next_term <= maximum:
		terms.append(next_term)
		next_term = terms[-1] + terms[-2]
	return sum(filter(callback, terms))
	# 4613732

def e_003(number=600851475143, callback=lambda l: l[-1]):
	"""
	The prime factors of 13195 are 5, 7, 13 and 29.
	What is the largest prime factor of the number 600851475143 ?
	"""
	result = []
	for i in range(2, number + 1):
		if number % i == 0:
			result.append(i)
			number /= i
			while number % i == 0: number /= i
		if i > number: break
	return callback(result)
	# 6857

def e_004(length=3, filter_callback=lambda x: str(x) == str(x)[::-1], callback=max):
	"""
	A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
	Find the largest palindrome made from the product of two 3-digit numbers.
	"""
	result = []
	for i in range(10 ** (length - 1), 10 ** length):
		for j in range(i, 10 ** length):
			if filter_callback(i * j): result.append(i * j)
	return callback(result)
	# 906609

def e_005(nums=range(1, 21)):
	"""
	2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
	What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
	"""
	return lcm(*nums)
	# 232792560

if __name__ == "__main__":
	if len(argv) < 2:
		print("Usage: %s PROBLEM [ARGS]")
	else:
		func = locals()['e_' + argv[1]]
		print(func.__doc__)
		print(func(*map(eval, argv[2:])))
